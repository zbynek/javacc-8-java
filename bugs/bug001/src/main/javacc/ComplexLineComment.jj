options {
  DEBUG_TOKEN_MANAGER=true;
}

PARSER_BEGIN(ComplexLineComment)
package clc;

import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.InputStream;
import java.io.PrintStream;

public class ComplexLineComment {

  public static void main(String args[]) {
    if (args.length != 3) {
      System.err.println("Error: invalid number of arguments (" + args.length + ")");
      System.err.println("Usage: ComplexLineComment inputfile outputfile errorfile");
      System.exit(4);
    }
    String fn = null;
    InputStream stdInput  = null;
    PrintStream stdOutput = null;
    PrintStream stdError  = null;
    try {
      // open files and redirect standard streams to them
      fn = "input";
      stdInput = System.in;
      System.setIn(new FileInputStream(args[0]));
      fn = "output";
      stdOutput = System.out;
      System.setOut(new PrintStream(args[1]));
      fn = "error";
      stdError  = System.err;
      System.setErr(new PrintStream(args[2]));
      // parse
      ComplexLineComment parser = new ComplexLineComment(System.in);
      parser.Input();
      System.err.println("Input file parsed successfully");
    } catch (FileNotFoundException e) {
      System.err.println("Error opening " + fn + " file");
      System.err.println(e.getMessage());
    } catch (Exception e) {
      System.err.println("Error parsing input file");
      System.err.println(e.getMessage());
    } finally {
      // restore standard streams
      if (stdInput  != null) System.setIn(stdInput);
      if (stdOutput != null) System.setOut(stdOutput);
      if (stdError  != null) System.setErr(stdError);
    }
  }

}
PARSER_END(ComplexLineComment)

SKIP : { " " | "\t" | "\n" | "\r" }

TOKEN :
{
   <#NA : ~[ "-", "\r", "\n" ] >
| <#EOL : ( "\n" | "\r" | "\r\n" ) >
}

SPECIAL_TOKEN :
{
  "--" : LineComment
}

< LineComment >
SPECIAL_TOKEN :
{
  < (
      < NA >
    | "-" < NA >
    )*
    (
      < EOL >
    | "-" < EOL >
    | "-" "-"
    )? > : DEFAULT
}

TOKEN :
{
  < Id: ["a"-"z", "A"-"Z"] ( ["a"-"z", "A"-"Z", "0"-"9", "-"] )* >
  { System.out.println(matchedToken.toString()); }
}

void Input() :
{}
{
  ( <Id> )*
  // { System.out.println("Finished ID+"); System.err.println("Finished ID+"); }
  <EOF>
  // { System.out.println("EOF found"); System.err.println("EOF found"); }
}
